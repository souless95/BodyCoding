<?xml version="1.0" encoding="UTF-8"?>

<!-- Mapper파일을 구성하기 위한 Doctype 설정 -->
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.bc.bodycoding.main.MemberMainService">

<!-- 모든 지점 위도 경도 선택 -->
<select id="mapmarkerSelect"
   parameterType="String"
   resultType="global.dto.GymDTO">
   select * from gym_detail
</select> 

<!-- 모든 지점 위도 경도 선택 -->
<select id="gymMap"
   parameterType="String"
   resultType="global.dto.GymDTO">
   select * from gym_detail where gym_code = #{gym_code}
</select> 

<!-- 모든 지점 선택 -->
<select id="gymlistSelect"
   parameterType="global.dto.MemberDTO"
   resultType="global.dto.MemberDTO">
   select * from member where authority='ROLE_ADMIN_SUB' and enabled ='1'
</select>

<!-- 전체 gym_code -->
<select id="gymlisttemp"
   parameterType="String"
   resultType="String">
   select gym_code from gym_detail
</select>

<!-- CHECK된 gym_code 찾기 -->
<select id="gymcodelistCheck"
   parameterType="map"
   resultType="String">
   select gym_code from gym_detail  where ${facility} = 'Y'
</select>

<!-- checkbox에 맞게 지점 검색 -->
<select id="gymlistCheck"
   parameterType="String"
   resultType="global.dto.MemberDTO">
   select * from member 
      where authority='ROLE_ADMIN_SUB' and enabled ='1'
        and gym_code in 
        <foreach item="item" collection="list" open="(" close=")" separator=",">
         #{item}
      </foreach>
</select> 

<!-- searchWord에 맞게 지점 검색 -->
<select id="gymlistSearch"
   parameterType="String"
   resultType="global.dto.MemberDTO">
   select * from member 
      where authority='ROLE_ADMIN_SUB' and enabled ='1'
        and(
           mem_address like '%'||#{searchWord}||'%' 
           or mem_name like '%'||#{searchWord}||'%' 
           or mem_phone like '%'||#{searchWord}||'%')
</select>

<!-- 지점 상세 보기 -->
<select id="selectOnegym"
   parameterType="global.dto.GymDTO"
   resultType="global.dto.GymDTO">
   select * from GYM_DETAIL where gym_code=#{gym_code}
</select>
<select id="selectOneMember"
   parameterType="global.dto.MemberDTO"
   resultType="global.dto.MemberDTO">
   select * from MEMBER where authority='ROLE_ADMIN_SUB' and gym_code=#{gym_code}
</select>



<!-- 모든 지점 트레이너 보여주기 -->
<select id="trainerALLlistSelect"
   parameterType="global.dto.MemberDTO"
   resultType="global.dto.MemberDTO">
   select * from member where authority='ROLE_TRAINER' and enabled ='1'
</select>

<!-- 선택된 트레이너 보여주기 -->
<select id="trainerlistSelect"
   parameterType="String"
   resultType="global.dto.MemberDTO">
   select * from member where authority='ROLE_TRAINER' and enabled ='1' and gym_code=#{gym_code}
</select>

<!-- 트레이너 상세 정보 보여주기 -->
<select id="trainerInfoSelect"
   parameterType="String"
   resultType="global.dto.MemberDTO">
   select * from member 
      where authority='ROLE_TRAINER' and mem_id=#{mem_id}
</select>

<!-- 트레이너 상세 정보중 지점명 보여주기(지점코드로 받아서 지점명으로 변환하는 과정) -->
<select id="gymInfoSelect"
   parameterType="String"
   resultType="String">
   select mem_name from member 
      where authority='ROLE_ADMIN_SUB' and gym_code=#{gym_code}
      and enabled ='1'
</select>

<!-- 트레이너에 대한 평점 보여주기 -->
<select id="gradeSelete"
   parameterType="String"
   resultType="String">
   select round(avg(review_grade),1) as avg_grade from review 
      where review_type='TRAINER' and review_subject =#{review_subject}
</select>

<!-- 트레이너에 대한 후기 보여주기 -->
<select id="reviewSelect"
   parameterType="String"
   resultType="global.dto.ReviewDTO">
   select * from review 
      where review_type='TRAINER' and review_subject=#{review_subject}
      order by review_regidate desc
</select>

<!-- 트레이너 후기 등록 -->
<insert id="reviewInsert"
   parameterType="global.dto.ReviewDTO">
   insert into REVIEW (review_idx, review_type, review_subject, review_comment, mem_id, review_grade)
       values(bodycoding_seq.nextval, 'TRAINER', #{review_subject}
       , #{review_comment}, #{mem_id}, #{review_grade})

</insert>

<!-- 모든 유형 상품 보여주기 -->
<select id="product_categoryALLSelect"
   parameterType="global.dto.ProductDTO"
   resultType="global.dto.ProductDTO">
   select * from product where product_type='일반상품'
</select>

<!-- 선택된 유형 상품 보여주기 -->
<select id="product_categorySelect"
   parameterType="String"
   resultType="global.dto.ProductDTO">
   select * from product where product_type='일반상품' and product_category=#{product_category}
</select> 

<!-- 상품 상세 정보 보여주기 -->
<select id="productInfoSelect"
   parameterType="int"
   resultType="global.dto.ProductDTO">
   select * from product where product_idx = #{product_idx}
</select>

<!-- 상품에 대한 평점 보여주기 -->
<select id="gradeSeleteP"
   parameterType="String"
   resultType="String">
   select round(avg(review_grade),1) from review 
      where review_type='PRODUCT' and review_subject =#{review_subject}
</select>

<!-- 상품에 대한 후기 보여주기 -->
<select id="reviewSelectP"
   parameterType="String"
   resultType="global.dto.ReviewDTO">
   select * from review
   where review_type='PRODUCT' and review_subject=#{review_subject}
   order by review_regidate desc
</select>

<!-- 상품 후기 등록 -->
<insert id="reviewInsertP"
   parameterType="global.dto.ReviewDTO">
   insert into REVIEW (review_idx, review_type, review_subject, review_comment, mem_id, review_grade)
      values (bodycoding_seq.nextval, 'PRODUCT', #{review_subject}
       , #{review_comment}, #{mem_id}, #{review_grade})
</insert>

<!-- 장바구니 목록 보기-->
<select id="cartList"
	parameterType="global.dto.ProductDTO"
	resultType="global.dto.ProductDTO">
	select C.mem_id, C.product_idx, product_img, product_name, product_description, 
		product_count, (product_count*product_price) product_price, cart_idx
		from cart C
			inner join product P on C.product_idx = P.product_idx
			inner join member M on C.mem_id = M.mem_id 
		where
			lower(C.mem_id) = #{mem_id}
</select>

<!-- 장바구니 상품 추가 전 확인 -->
<select id="cartAddSelect"
	parameterType="global.dto.ProductDTO"
	resultType="global.dto.ProductDTO">
	select * from cart where mem_id=#{mem_id} and product_idx=#{product_idx}
</select>
<!-- 장바구니에 상품이 있을경우 1개 추가하기 -->
<update id="cartAddPlus"
	parameterType="global.dto.ProductDTO">
	update cart set product_count=product_count+1 where mem_id=#{mem_id} and product_idx=#{product_idx}
</update>

<!-- 장바구니에 상품이 없을 경우 상품 추가하기 -->
<insert id="cartAdd"
	parameterType="global.dto.ProductDTO">
	insert into cart (cart_idx, mem_id, product_idx, product_count) 
		values (bodycoding_seq.nextval, #{mem_id}, #{product_idx}, #{product_count})
</insert>

<!-- 장바구니에 전체 상품 삭제하기 -->
<delete id="cartDelete"
	parameterType="global.dto.ProductDTO">
	delete from cart where mem_id=#{mem_id} and product_idx=#{product_idx}
</delete>

<!-- 장바구니 수량 증감 -->
<update id="plusMinus" parameterType="global.dto.ProductDTO">
	update cart set product_count = #{product_count} 
		where mem_id=#{mem_id} and product_idx=#{product_idx}
</update>

<!-- 증감된 수량 보여주기 -->
<select id="selectPlusMinus"
	parameterType="global.dto.ProductDTO"
	resultType="global.dto.ProductDTO">
	
	select C.mem_id, C.product_idx, product_count, (product_count*product_price) product_price  
		from cart C
			inner join product P on C.product_idx = P.product_idx
			inner join member M on C.mem_id = M.mem_id 
		where
			lower(C.mem_id) = #{mem_id}
</select>

<update id="cartStatusUpdate" parameterType="global.dto.ProductDTO">
	UPDATE cart SET cart_status=1 
		WHERE cart_idx=#{cart_idx}
</update>

<select id="pExpectSelect"
	parameterType="global.dto.ProductDTO"
	resultType="global.dto.ProductDTO">
	SELECT m.mem_point, p.*, c.product_count FROM cart c
	    INNER JOIN member m ON m.mem_id = c.mem_id
	    INNER JOIN product p ON c.product_idx = p.product_idx
	WHERE c.mem_id=#{mem_id} and cart_status=1
</select>

</mapper>